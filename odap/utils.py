import numpy as np

"""
* Transform an y in [0;1] generated by an uniform distribution to an x which follows the
* properties of a power law distribution.
* @param x0 - the lower bound for the numbers (corresponds to the minimal L_c)
* @param x1 - the upper bound (correspond to the maximum of L_c of the two satellites or infinite if
*              there is no upper bound)
 * @param n - the exponent from the power law distribution, more precisely the exponent of the
*              probability density function (pdf)
* @param y - the value from the uniform distribution to transform
 * @return the transformed x following the power law distribution
*/
"""
def uniformToPowerLaw(x0, x1, n, y):
    step = x1**(n + 1) - x0**(n + 1) * y + x0**(n + 1)

# Assuming angle in degrees
def normalizeAngle(angle):
    return (angle + 360) % 360

# Assuming angle in degrees
def normalizeRadians(rad):
    return (rad + 2*np.pi) % 2*np.pi

